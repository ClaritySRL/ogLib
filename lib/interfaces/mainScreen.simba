function mainScreen.getHorizontalDegrees():int32;
  var
    funcAngle:double;
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    funcAngle:=arcTan2(funcView[1],funcView[0]);
    if funcAngle>0 then
      result:=round(funcAngle*360/(2*3.1415926535897932384626433832795))
    else
      result:=round((2*3.1415926535897932384626433832795+funcAngle)*360/(2*3.1415926535897932384626433832795));
    exit(result);
  end;

function mainScreen.getHorizontalRadians():double;
  var
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    result:=arcTan2(funcView[1],funcView[0]);
    if result<0 then
      result:=2*3.1415926535897932384626433832795+result;
    exit(result);
  end;

function mainScreen.getVerticalDegrees():int32;
  var
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    exit(result:=round(90-funcView[5]*90));
  end;

function mainScreen.getVerticalRadians():double;
  var
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    exit(result:=1.5707963267948966192313216916398-funcView[5]*1.5707963267948966192313216916398);
  end;

procedure mainScreen.getDegrees(var funcHorizontal,funcVertical:int32);
  var
    funcAngle:double;
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    funcAngle:=arcTan2(funcView[1],funcView[0]);
    if funcHorizontal>0 then
      funcHorizontal:=round(funcAngle*360/(2*3.1415926535897932384626433832795))
    else
      funcHorizontal:=round((2*3.1415926535897932384626433832795+funcAngle)*360/(2*3.1415926535897932384626433832795));
    funcVertical:=round(90-funcView[5]*90);
  end;

function mainScreen.getDegrees():array[0..1] of int32;overload;
  var
    funcAngle:double;
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    funcAngle:=arcTan2(funcView[1],funcView[0]);
    if funcAngle>0 then
      result[0]:=round(funcAngle*360/(2*3.1415926535897932384626433832795))
    else
      result[0]:=round((2*3.1415926535897932384626433832795+funcAngle)*360/(2*3.1415926535897932384626433832795));
    result[1]:=round(90-funcView[5]*90);
  end;

procedure mainScreen.getRadians(var funcHorizontal,funcVertical:double);
  var
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    funcHorizontal:=arcTan2(funcView[1],funcView[0]);
    if funcHorizontal<0 then
      funcHorizontal:=2*3.1415926535897932384626433832795+funcHorizontal;
    funcVertical:=1.5707963267948966192313216916398-funcView[5]*1.5707963267948966192313216916398;
  end;

function mainScreen.getRadians():array[0..1] of double;overload;
  var
    funcView:array[0..15] of single;
  begin
    funcView:=glMatrices()^;
    result[0]:=arcTan2(funcView[1],funcView[0]);
    if result[0]<0 then
      result[0]:=2*3.1415926535897932384626433832795+result[0];
    result[1]:=1.5707963267948966192313216916398-funcView[5]*1.5707963267948966192313216916398;
  end;

 function mainScreen.setHorizontalDegrees(funcDegrees:int32):boolean;
  begin exit(result:=mainScreen.setHorizontalRadians(funcDegrees*0.01745329251994329576923690768489));end;

function mainScreen.setHorizontalDirection(funcDirection:ansiString):boolean;
  var
    funcAngle:double;
  begin
    case funcDirection:=replace(lowerCase(funcDirection),' ','-',[0,1]) of
      'north':funcAngle:=0;
      'north-west':funcAngle:=0.78539816339744830961566084581988;
      'west':funcAngle:=1.5707963267948966192313216916401;
      'south-west':funcAngle:=2.3561944901923449288469825374602;
      'south':funcAngle:=3.1415926535897932384626433832795;
      'south-east':funcAngle:=3.9269908169872415480783042291003;
      'east':funcAngle:=4.7123889803846898576939650749203;
      'north-east':funcAngle:=5.4977871437821381673096259207404;
    end;
    exit(result:=mainScreen.setHorizontalRadians(funcAngle));
  end;

function mainScreen.setHorizontalRadians(funcRadians:double):boolean;
  var
    funcDifference:double;
    funcLeft,
      funcRight,
      funcTimedOut:boolean;
    funcTimeOut:countDown;
  begin
    funcTimeOut.setTime(random(2500,5000));
    while (((funcDifference:=shortestRadians(mainScreen.getHorizontalRadians(),funcRadians))>0.26179938779914943653855361527335) or (funcDifference<-0.26179938779914943653855361527335)) and (not (funcTimedOut:=funcTimeOut.isFinished())) do
      begin
        funcLeft:=isKeyDown(37);
        funcRight:=isKeyDown(39);
        if funcDifference<0 then
          begin
            if funcRight then
              keyUp(39);
            if funcLeft then
              continue;
            keyDown(37);
          end
        else
          begin
            if funcLeft then
              keyUp(37);
            if funcRight then
              continue;
            keyDown(39);
          end;
      end;
    if isKeyDown(37) then
      keyUp(37);
    if isKeyDown(39) then
      keyUp(39);
    exit(result:=not funcTimedOut);
  end;

function mainScreen.setVerticalDegrees(funcDegrees:int32):boolean;
  begin exit(result:=mainScreen.setVerticalRadians(funcDegrees*0.01745329251994329576923690768489));end;

function mainScreen.setVerticalDirection(funcDirection:ansiString):boolean;
  var
    funcAngle:double;
  begin
    case funcDirection:=replace(lowerCase(funcDirection),' ','-',[0,1]) of
      'high','top','up':funcAngle:=0.87266462599716478846184538424431;
      'medium','middle':funcAngle:=0.43633231299858239423092269212215;
      'bottom','down','low':funcAngle:=0;
    end;
    exit(result:=mainScreen.setVerticalRadians(funcAngle));
  end;

function mainScreen.setVerticalRadians(funcRadians:double):boolean;
  var
    funcDifference:double;
    funcLeft,
      funcRight,
      funcTimedOut:boolean;
    funcTimeOut:countDown;
  begin
    funcTimeOut.setTime(random(2500,5000));
    while (((funcDifference:=shortestRadians(mainScreen.getVerticalRadians(),funcRadians))>0.26179938779914943653855361527335) or (funcDifference<-0.26179938779914943653855361527335)) and (not (funcTimedOut:=funcTimeOut.isFinished())) do
      begin
        funcLeft:=isKeyDown(40);
        funcRight:=isKeyDown(38);
        if funcDifference<0 then
          begin
            if funcRight then
              keyUp(38);
            if funcLeft then
              continue;
            keyDown(40);
          end
        else
          begin
            if funcLeft then
              keyUp(40);
            if funcRight then
              continue;
            keyDown(38);
          end;
      end;
    if isKeyDown(40) then
      keyUp(40);
    if isKeyDown(38) then
      keyUp(38);
    exit(result:=not funcTimedOut);
  end;

function mainScreen.setRadians(funcHorizontal,funcVertical:double):boolean;
  begin

  end;
